name: changie-trigger-release
on:
  workflow_call:
    inputs:
      additional_git_adds:
        description: "Additional files to add to git, pass with single quotes and delimited with space `'file1.txt' 'folder/file2.txt'`"
        required: false
        type: string
  workflow_dispatch:
    inputs:
      additional_git_adds:
        description: "Additional files to add to git, pass with single quotes and delimited with space `'file1.txt' 'folder/file2.txt'`"
        required: false
        type: string

env:
  BASE_BRANCH: 'main' # Default value for base branch
  HEAD_BRANCH: 'chore/new-release-from-dependencies' # Default value for head branch

permissions:
  contents: write
  pull-requests: write

jobs:
  dependency-release:
    runs-on: ubuntu-latest
    name: dependency-release
    steps:
      - name: checkout-repo
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          fetch-depth: 0 # Ensures a full checkout
      - name: configure-default-git-committer
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
      - name: check-branch-existence
        id: check_branch
        run: |
          echo "Checking if '${{ env.HEAD_BRANCH }}' branch exists..."
          if [[ -z "$(git ls-remote --heads origin "${{ env.HEAD_BRANCH }}")" ]]; then
              echo "Branch does not exist. Continuing workflow."
              echo "BRANCH_ALREADY_EXISTS=false" >> "$GITHUB_OUTPUT"
          else
              echo "Branch exists. Skipping workflow."
              echo "BRANCH_ALREADY_EXISTS=true" >> "$GITHUB_OUTPUT"
          fi
      - uses: aquaproj/aqua-installer@ea518c135a02fc11ff8024364510c181a5c6b342 # v4.0.3
        if: steps.check_branch.outputs.BRANCH_ALREADY_EXISTS == 'false'
        with:
          aqua_version: v2.42.2
          aqua_opts: '--only-link' # lazy install so we can start this way
          policy_allow: true
        env:
          AQUA_LOG_LEVEL: debug

      # - name: install-jq # install before aqua since aqua requirements will need jq already available
      #   uses: dcarbone/install-jq-action@8867ddb4788346d7c22b72ea2e2ffe4d514c7bcb # v2.1.0
      - name: install-trunk
        run: |
          curl https://get.trunk.io -fsSL | bash -s -- -y
      - name: ensure-requirements-are-in-aqua-config
        if: steps.check_branch.outputs.BRANCH_ALREADY_EXISTS == 'false'
        run: |
          update_tags_for_package() {
              local Package="$1"
              # doesn't seem to work when I provided qualified path, commenting out for reference/improvement later: local_file="$(aqua info | jq 'first(.config_files[].path)' | sed -e "s/(USER)/$(whoami)/g")"
              local_file=$(find . -name "aqua.yaml" -print -quit)
              echo "Path to the aqua.yaml file: ${local_file}"
              echo "üëâ aqua info output: $(aqua info)"
              echo "üëâ local_file for aqua detected as: ${local_file}"
              aqua generate -i "${Package}"

              local PackageRegex="^${Package}@.*"

              local tags=$(yq e ".packages[] | select(.name | test(\"$PackageRegex\")) | .tags[]" "$local_file")

              if [[ $tags =~ "release" ]]; then
                echo "The package $Package already contains 'release' in 'tags'."
              else
                yq e -i "(.packages[] | select(.name | test(\"$PackageRegex\")) | .tags) |= (. // [] | . + [\"release\"])" "$local_file"
                echo "Updated 'tags' of $Package to include 'release'."
              fi
          }
          packages_to_update=("cli/cli" "miniscruff/changie" "mikefarah/yq")
          for pkg in "${packages_to_update[@]}"; do
              update_tags_for_package "$pkg"
          done
          aqua install --tags release
      - name: update-aqua-checksum
        if: steps.check_branch.outputs.BRANCH_ALREADY_EXISTS == 'false'
        run: |
          git fetch
          FILES_CHANGED=$(git diff --name-only "origin/${{ env.BASE_BRANCH }}" )
          if [[ $FILES_CHANGED == *"aqua.yaml"* ]] || [[ $FILES_CHANGED == *"aqua-checksum.json"* ]] || [[ $FILES_CHANGED == *".aqua/aqua-checksum.json"* ]]; then
            if [[ -f aqua-checksum.json ]] || [[ -f .aqua/aqua-checksum.json ]]; then
              echo "updating aqua-checksum.json as this repo has one, and changes were detected in aqua"
              echo "this might take a few minutes, be patient"
              aqua update-checksum
            else
              echo "aqua-checksum.json not found, so no need to update this... skipping"
            fi
          else
            echo "No changes in aqua.yaml or aqua-checksum.json files. Skipping update."
          fi
      - name: create-changelog-entry
        if: steps.check_branch.outputs.BRANCH_ALREADY_EXISTS == 'false'
        timeout-minutes: 1 # in case missing kind, config, or asking for manual input (avoid), let's catch and fail quickly
        run: |
          echo "Creating changelog entry..."
          LABEL=$(yq '.kinds[] | select(.key == "dependencies") | .key // "‚¨ÜÔ∏è Dependencies"' .changie.yaml)
          LABEL=${LABEL:-‚¨ÜÔ∏è Dependencies}

          echo "label format to use: $LABEL"

          changie new --kind "${LABEL}" --body "Maintenance release due to updated dependencies."
          changie batch auto
          changie merge
      - name: prepare-files-for-commit
        if: steps.check_branch.outputs.BRANCH_ALREADY_EXISTS == 'false'
        run: |
          echo "Adding changelog files for commit..."
          git add '.changes/*' 'CHANGELOG*.md' '*aqua.yaml'
          git add .
          echo "this is added because unknown files have their version replaced and we should make sure these get included in the PR."
      - name: add-additional-files
        if: steps.check_branch.outputs.BRANCH_ALREADY_EXISTS == 'false' && ${{ inputs.additional_git_adds != '' }}
        run: |
          echo "Adding additional files for commit..."
          git add ${{ inputs.additional_git_adds }}
      - name: trunk-fmt
        run: |
          trunk fmt
      - name: create-new
        if: steps.check_branch.outputs.BRANCH_ALREADY_EXISTS == 'false'
        run: |
          git checkout -b ${{ env.HEAD_BRANCH }}
          git commit -m "chore(deps): update changelogs"
          git push -u origin ${{ env.HEAD_BRANCH }}
      - name: create-pull-request
        if: steps.check_branch.outputs.BRANCH_ALREADY_EXISTS == 'false'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "Creating pull request..."
          PR_OUTPUT=$(gh pr create --title "chore(deps): trigger a release based with changie updates" \
            --body "Approval will trigger update." \
            --base ${{ env.BASE_BRANCH }} \
            --head ${{ env.HEAD_BRANCH }} \
            --label dependencies)
          PR_URL=$(echo "$PR_OUTPUT" | awk '/^https:\/\/github\.com/{print $1}')
          PR_NUMBER=$(basename $PR_URL)
          gh pr merge $PR_NUMBER --auto --delete-branch --squash
          echo "configured autocomplete settings"
